import logging
import os

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher.filters import Text

from app.bot.keyboards import get_subscribe_menu, get_main_menu
from app.repository.user_repository import get_user_by_telegram_id, save_user

bot = Bot(token=os.environ['EMOTIONS_TG_TOKEN'], parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
logging.basicConfig(level=logging.INFO)

@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    user_row = get_user_by_telegram_id(str(message.from_user.id))
    if user_row is None:
        start_message = '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å–∏ ' \
                        '–æ —Ç–≤–æ—ë–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –æ—Ü–µ–Ω–∏–≤–∞—Ç—å, –∫–∞–∫ —Ç—ã –ø—Ä–æ–≤–æ–¥–∏—à—å –¥–Ω–∏, –æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏. –î–ª—è ' \
                        '–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å, —Ö–æ—Ç–µ–ª –ª–∏ –±—ã —Ç—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ ' \
                        '–ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–æ–º –¥–Ω–µ?'
        await message.answer(start_message, reply_markup=get_subscribe_menu())
    else:
        start_message = '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å–∏ ' \
                        '–æ —Ç–≤–æ—ë–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –æ—Ü–µ–Ω–∏–≤–∞—Ç—å, –∫–∞–∫ —Ç—ã –ø—Ä–æ–≤–æ–¥–∏—à—å –¥–Ω–∏, –æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏.'
        await message.answer(start_message, reply_markup=get_main_menu())

@dp.callback_query_handler(Text(startswith='subscribe_'))
async def subscribe(call: types.CallbackQuery):
    subscribe_choice = call.data[10:]
    if subscribe_choice == 'true':
        save_user(str(call.from_user.id), call.from_user.first_name, call.from_user.last_name, call.from_user.username, True)
    else:
        save_user(str(call.from_user.id), call.from_user.first_name, call.from_user.last_name, call.from_user.username, False)
    start_message = '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üòå'
    await call.message.answer(start_message, reply_markup=get_main_menu())


async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_shutdown=shutdown)
