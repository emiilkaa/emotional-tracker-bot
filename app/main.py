import datetime
import emoji
import logging
import os

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InputMediaPhoto, InputMediaVideo

from repository.media_repository import save_media_url, get_media_by_user_id_and_date
from repository.notes_repository import save_note, get_notes_by_user_id_and_date
from bot.keyboards import get_subscribe_menu, get_main_menu, get_change_day_menu, get_marks, get_settings_menu
from repository.emotions_repository import find_emotions_by_user_id_and_date, save_emotions
from repository.marks_repository import find_mark_by_user_id_and_date, save_mark
from repository.user_repository import get_user_by_telegram_id, save_user

bot = Bot(token=os.environ['EMOTIONS_TG_TOKEN'], parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())
logging.basicConfig(level=logging.INFO)


class Form(StatesGroup):
    emojis = State()
    get_date = State()
    note_date = State()
    note = State()
    media_date = State()
    media = State()


processing_date = dict()
processing_note_date = dict()
processing_media_date = dict()


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    user_row = get_user_by_telegram_id(str(message.from_user.id))
    if user_row is None:
        start_message = '–ü—Ä–∏–≤–µ—Ç! –Ø –í–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –í–∞–º –¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å–∏ ' \
                        '–æ —Å–≤–æ—ë–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –æ—Ü–µ–Ω–∏–≤–∞—Ç—å, –∫–∞–∫ –í—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –¥–Ω–∏, –æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏. –î–ª—è ' \
                        '–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ, —Ö–æ—Ç–µ–ª–∏ –ª–∏ –±—ã –í—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ ' \
                        '–ø—Ä–æ–≤–µ–¥—ë–Ω–Ω–æ–º –¥–Ω–µ?'
        await message.answer(start_message, reply_markup=get_subscribe_menu())
    else:
        start_message = '–ü—Ä–∏–≤–µ—Ç! –Ø –í–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –í–∞–º –¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å–∏ ' \
                        '–æ —Å–≤–æ—ë–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –æ—Ü–µ–Ω–∏–≤–∞—Ç—å, –∫–∞–∫ –í—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –¥–Ω–∏, –æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏.'
        await message.answer(start_message, reply_markup=get_main_menu())


@dp.message_handler(state='*', commands='cancel')
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:', reply_markup=get_main_menu())


@dp.callback_query_handler(Text(startswith='subscribe_'))
async def subscribe(call: types.CallbackQuery):
    subscribe_choice = call.data[10:]
    if subscribe_choice == 'true':
        save_user(str(call.from_user.id), call.from_user.first_name, call.from_user.last_name, call.from_user.username,
                  True)
    else:
        save_user(str(call.from_user.id), call.from_user.first_name, call.from_user.last_name, call.from_user.username,
                  False)
    start_message = '–û—Ç–ª–∏—á–Ω–æ, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ú–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º üòå'
    await call.message.answer(start_message, reply_markup=get_main_menu())


async def evaluate(message: types.Message, date: datetime.date):
    mark = find_mark_by_user_id_and_date(str(message.from_user.id), date)
    if mark is not None:
        emotions = find_emotions_by_user_id_and_date(str(message.from_user.id), date)
        if emotions is not None:
            msg = f'–í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–≤–∞–ª–∏ —ç—Ç–æ—Ç –¥–µ–Ω—å.\n\n–û—Ü–µ–Ω–∫–∞ –∑–∞ {date.strftime("%d.%m.%Y")}: {mark.mark}\n' \
                  f'–≠–º–æ—Ü–∏–∏ –∑–∞ {date.strftime("%d.%m.%Y")}: {emotions.get_emojis()}'
            await message.reply(msg, reply_markup=get_change_day_menu(date))
        else:
            msg = f'–ö–∞–∂–µ—Ç—Å—è, –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É –∑–∞ –¥–µ–Ω—å, –Ω–æ –Ω–µ –æ–ø–∏—Å–∞–ª–∏ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é —ç–º–æ–¥–∑–∏.\n\n' \
                  f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ –±–æ–ª–µ–µ —Ç—Ä—ë—Ö —ç–º–æ–¥–∑–∏ (—Å–ª–∏—Ç–Ω–æ, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤), –∫–æ—Ç–æ—Ä—ã–º–∏ ' \
                  f'–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –¥–µ–Ω—å:'
            processing_date[message.from_user.id] = date
            await Form.emojis.set()
            await message.reply(msg)
    else:
        msg = f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é –±—ã –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–º—É –¥–Ω—é ({date.strftime("%d.%m.%Y")}):'
        await message.reply(msg, reply_markup=get_marks(date))


@dp.callback_query_handler(Text(startswith='set_mark_'))
async def set_mark(call: types.CallbackQuery):
    mark = call.data[9:10]
    date = datetime.datetime.strptime(call.data[11:], '%d_%m_%Y')
    save_mark(str(call.from_user.id), mark, date)

    msg = '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ –±–æ–ª–µ–µ —Ç—Ä—ë—Ö —ç–º–æ–¥–∑–∏ (—Å–ª–∏—Ç–Ω–æ, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤), ' \
          '–∫–æ—Ç–æ—Ä—ã–º–∏ –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –¥–µ–Ω—å:'
    processing_date[call.from_user.id] = date
    await Form.emojis.set()
    await call.message.reply(msg)


def is_emojis_message_correct(msg):
    emojis_count = 0
    for c in msg:
        if not c.isspace() and not emoji.is_emoji(c):
            return False
        if emoji.is_emoji(c):
            emojis_count += 1
    if emojis_count > 3:
        return False
    return True


@dp.message_handler(state=Form.emojis)
async def set_emojis(message: types.Message, state: FSMContext):
    if not is_emojis_message_correct(message.text):
        msg = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ —Ç—Ä—ë—Ö —ç–º–æ–¥–∑–∏ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.'
        await message.reply(msg)
    else:
        emojis = []
        for c in message.text:
            if emoji.is_emoji(c):
                emojis.append(c)
        save_emotions(str(message.from_user.id), emojis, processing_date[message.from_user.id])
        processing_date.pop(message.from_user.id)
        await state.finish()
        await message.reply('–û–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!', reply_markup=get_main_menu())


@dp.callback_query_handler(Text(startswith='change_day_'))
async def change_day_mark(call: types.CallbackQuery):
    date = datetime.datetime.strptime(call.data[11:], '%d_%m_%Y')
    msg = f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é –±—ã –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–º—É –¥–Ω—é ({date.strftime("%d.%m.%Y")}):'
    await call.message.reply(msg, reply_markup=get_marks(date))


@dp.callback_query_handler(Text(equals='keep_old_mark'))
async def keep_old_mark(call: types.CallbackQuery):
    await call.message.reply('–•–æ—Ä–æ—à–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–∂–Ω—é—é –æ—Ü–µ–Ω–∫—É.', reply_markup=get_main_menu())


@dp.message_handler(Text(equals='–û—Ü–µ–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å'))
async def evaluate_today(message: types.Message):
    await evaluate(message, datetime.datetime.today())


@dp.message_handler(Text(equals='–û—Ü–µ–Ω–∏—Ç—å –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å'))
async def evaluate_yesterday(message: types.Message):
    await evaluate(message, datetime.datetime.today() - datetime.timedelta(days=1))


@dp.message_handler(Text(equals='–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è'))
async def get_old_records(message: types.Message):
    await Form.get_date.set()
    await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')


@dp.message_handler(state=Form.get_date)
async def print_record(message: types.Message, state: FSMContext):
    date = datetime.datetime.strptime(message.text, '%d.%m.%Y')
    mark = find_mark_by_user_id_and_date(str(message.from_user.id), date)
    emotions = find_emotions_by_user_id_and_date(str(message.from_user.id), date)
    msg = ''
    if mark is None and emotions is None:
        msg = '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ü–µ–Ω–∫–∞ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'
    else:
        if mark is not None:
            msg = f'–û—Ü–µ–Ω–∫–∞ –∑–∞ {date.strftime("%d.%m.%Y")}: {mark.mark}'
        if emotions is not None:
            msg += f'\n–≠–º–æ—Ü–∏–∏ –∑–∞ {date.strftime("%d.%m.%Y")}: {emotions.get_emojis()}'

    notes = get_notes_by_user_id_and_date(str(message.from_user.id), date)
    if notes is not None and len(notes) > 0:
        msg += '\n\n–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏:\n'
        for i, note in enumerate(notes, 1):
            msg += f'\n<b><i>–ó–∞–ø–∏—Å—å #{i}:</i></b>\n{note.note}\n'

    files = get_media_by_user_id_and_date(str(message.from_user.id), date)
    if files is not None and len(files) > 0:
        msg += '\n\n–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å:'
    await state.finish()
    await message.reply(msg, reply_markup=get_main_menu())

    MEDIA_TYPE_MAPPING = {'PHOTO': InputMediaPhoto, 'VIDEO': InputMediaVideo}
    if len(files) == 1:
        if files[0].file_type == 'PHOTO':
            await bot.send_photo(message.from_user.id, files[0].media_url)
        elif files[0].file_type == 'VIDEO':
            await bot.send_video(message.from_user.id, files[0].media_url)
    elif len(files) > 1:
        for i in range(0, len(files), 10):
            group = files[i:i + 10]
            media_group = list(
                map(lambda media_file: MEDIA_TYPE_MAPPING[media_file.file_type](media_file.media_url), group)
            )
            await bot.send_media_group(message.from_user.id, media_group)


@dp.message_handler(Text(equals='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'))
async def change_settings(message: types.Message):
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ, –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ª–∏ –í–∞–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?',
                        reply_markup=get_settings_menu())


@dp.message_handler(Text(equals='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É'))
async def get_note_date(message: types.Message):
    await Form.note_date.set()
    await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É, –∑–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')


@dp.message_handler(state=Form.note_date)
async def get_note(message: types.Message, state: FSMContext):
    date = datetime.datetime.strptime(message.text, '%d.%m.%Y')
    processing_note_date[message.from_user.id] = date
    await state.finish()
    await Form.note.set()
    await message.reply('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∞–º—É –∑–∞–º–µ—Ç–∫—É, –∫–æ—Ç–æ—Ä—É—é –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:')


@dp.message_handler(state=Form.note)
async def add_note(message: types.Message, state: FSMContext):
    date = processing_note_date[message.from_user.id]
    processing_note_date.pop(message.from_user.id)
    save_note(str(message.from_user.id), message.text, date)
    await state.finish()
    await message.reply('–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', reply_markup=get_main_menu())


@dp.message_handler(Text(equals='–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ'))
async def get_media_date(message: types.Message):
    await Form.media_date.set()
    await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É, –∫ –∫–∞–∫–æ–º—É –¥–Ω—é –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')


@dp.message_handler(state=Form.media_date)
async def get_media(message: types.Message, state: FSMContext):
    date = datetime.datetime.strptime(message.text, '%d.%m.%Y')
    processing_media_date[message.from_user.id] = date
    await state.finish()
    await Form.media.set()
    await message.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–æ–≤–Ω–æ –û–î–ù–û —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (–ù–ï —Ñ–∞–π–ª–æ–º):')


@dp.message_handler(state=Form.media, content_types=types.ContentTypes.ANY)
async def add_media(message: types, state: FSMContext):
    date = processing_media_date[message.from_user.id]
    processing_media_date.pop(message.from_user.id)
    err = False
    if message.photo:
        save_media_url(str(message.from_user.id), message.photo[-1].file_id, 'PHOTO', date)
    elif message.video:
        save_media_url(str(message.from_user.id), message.video.file_id, 'VIDEO', date)
    else:
        err = True
    if err:
        await message.reply('–•–º, –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ —Ñ–æ—Ç–æ –∏ –Ω–µ –≤–∏–¥–µ–æ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å '
                            '–∫–æ–º–∞–Ω–¥–æ–π /cancel')
    else:
        await state.finish()
        await message.reply('–ú–µ–¥–∏–∞—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!', reply_markup=get_main_menu())


async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_shutdown=shutdown)
